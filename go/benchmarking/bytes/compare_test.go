package main

import (
	"bytes"
	"encoding/base64"
	"testing"
)

var (
	a = []byte{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	}
	b = []byte{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
	}
	mask = []byte{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	}
)

func BenchmarkBytesEqual(bn *testing.B) {
	for n := 0; n < bn.N; n++ {
		bytes.Equal(a, b)
	}
}

func BenchmarkBytesEqualMasked(bn *testing.B) {
	for n := 0; n < bn.N; n++ {
		BytesEqualMasked(a, b, mask)
	}
}

func BenchmarkBytesEqualMaskedPartial(bn *testing.B) {
	f := func() func([]byte) bool {
		return func(tgt []byte) bool {
			return BytesEqualMasked(a, tgt, mask)
		}
	}()
	for n := 0; n < bn.N; n++ {
		f(b)
	}
}

func BenchmarkBase64Encode(bn *testing.B) {
	tmpbuf := make([]byte, len(a)*2)
	for n := 0; n < bn.N; n++ {
		base64.StdEncoding.Encode(tmpbuf, a)
	}
}

func BenchmarkBase64EncodeCompare(bn *testing.B) {
	tmpbuf := make([]byte, len(a)*2)
	l := len(a)
	for n := 0; n < bn.N; n++ {
		base64.StdEncoding.Encode(tmpbuf, a)
		bytes.Equal(a, tmpbuf[:l])
	}
}
